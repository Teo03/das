
In this file are stated the design patterns we used throughout our code:

1. Factory Pattern
Used in the WebScraper class for creating and managing browser drivers     

def _get_driver(self):
        try:
            driver = self.driver_pool.get_nowait()
        except queue.Empty:
            driver = self._create_driver()
        return driver
    
    def _return_driver(self, driver):
        self.driver_pool.put(driver)    
===========================================================

2. Pipeline Pattern
Implemented for data processing with modular filters 

from abc import ABC, abstractmethod
from typing import Any
from .models import Issuer, StockPrice
from .utils import WebScraper
from decimal import Decimal
import pandas as pd
import time

class Filter(ABC):
    @abstractmethod
    def process(self, input_data: Any) -> Any:
        pass

class IssuerListFilter(Filter):
    def process(self, input_data=None):
        scraper = WebScraper(headless=True)
        symbols = scraper.get_symbols()
        
        # create or update issuers in database, excluding symbols starting with 'E'
        filtered_symbols = []
        for symbol_data in symbols:
            if not symbol_data['symbol'].startswith('E'):
                Issuer.objects.update_or_create(
                    code=symbol_data['symbol'],
                    defaults={'name': symbol_data['name']}
                )
                filtered_symbols.append(symbol_data['symbol'])
        
        return filtered_symbols  
==============================================================================
3. Command Pattern
Used throughout Django management commands  from django.core.management.base 


import BaseCommand
from core.pipeline import Pipeline, IssuerListFilter

class Command(BaseCommand):
    help = 'Gets all available stock symbols from MSE'

    def handle(self, *args, **options):
        pipeline = Pipeline()
        pipeline.add_filter(IssuerListFilter())
        
        symbols = pipeline.execute()

        from core.models import Issuer
        symbols_data = []
        for symbol in symbols:
            issuer = Issuer.objects.get(code=symbol)
            symbols_data.append({
                'symbol': issuer.code,
                'name': issuer.name
            })
        
        self.stdout.write(
            self.style.SUCCESS(
                f'Successfully extracted {len(symbols)} symbols'
            )
        )
        
        for symbol_data in symbols_data:
            self.stdout.write(f"{symbol_data['symbol']}: {symbol_data['name']}") 
==============================================================================
4. Strategy Pattern
Used in technical analysis for different trading strategies and indicators

    # Calculate technical indicators for different periods
    periods = [1, 5, 20]  # 1 day, 1 week, 1 month
    indicators = calculate_technical_indicators(df, periods)
    # Generate signals for each period
    signals = {}
    consensus = {}
    for period in periods:
        signals[period] = generate_signals(indicators[period], period)
        consensus[period] = get_consensus_signal(signals[period], period)

==============================================================================
5. Observer Pattern
Implemented through Django's signal system (implicit in the models)

class Issuer(models.Model):
    code = models.CharField(max_length=20, unique=True)
    name = models.CharField(max_length=200)
    last_updated = models.DateTimeField(null=True, blank=True)

    def __str__(self):
        return f"{self.code} - {self.name}"

class IssuerNews(models.Model):
    issuer = models.ForeignKey(Issuer, on_delete=models.CASCADE, related_name='news')
    title = models.CharField(max_length=500)
    content = models.TextField()
    published_date = models.DateTimeField()
    source_url = models.URLField(max_length=500, blank=True)
    created_at = models.DateTimeField(auto_now_add=True)
    updated_at = models.DateTimeField(auto_now=True)

    class Meta:
        verbose_name_plural = 'Issuer News'
        ordering = ['-published_date']
        indexes = [
            models.Index(fields=['published_date']),
            models.Index(fields=['issuer', 'published_date'])
        ]

    def __str__(self):
        return f"{self.issuer.code} - {self.title[:50]}"

class StockPrice(models.Model):
    issuer = models.ForeignKey(Issuer, on_delete=models.CASCADE)
    date = models.DateField()
    last_trade_price = models.DecimalField(max_digits=10, decimal_places=2)
    max_price = models.DecimalField(max_digits=10, decimal_places=2)
    min_price = models.DecimalField(max_digits=10, decimal_places=2)
    avg_price = models.DecimalField(max_digits=10, decimal_places=2)
    price_change = models.DecimalField(max_digits=10, decimal_places=2)
    volume = models.IntegerField()
    turnover_best = models.DecimalField(max_digits=15, decimal_places=2)
    total_turnover = models.DecimalField(max_digits=15, decimal_places=2)

    class Meta:
        unique_together = ['issuer', 'date']
        indexes = [
            models.Index(fields=['date']),
            models.Index(fields=['issuer', 'date'])
        ]
==============================================================================
6. Template Method Pattern
Used in the abstract Filter class


class Filter(ABC):
    @abstractmethod
    def process(self, input_data: Any) -> Any:
        pass


==============================================================================
7. Repository Pattern
Implemented through Django's ORM with models acting as repositories
class Issuer(models.Model):
    code = models.CharField(max_length=20, unique=True)
    name = models.CharField(max_length=200)
    last_updated = models.DateTimeField(null=True, blank=True)

    def __str__(self):
        return f"{self.code} - {self.name}"

class IssuerNews(models.Model):
    issuer = models.ForeignKey(Issuer, on_delete=models.CASCADE, related_name='news')
    title = models.CharField(max_length=500)
    content = models.TextField()
    published_date = models.DateTimeField()
    source_url = models.URLField(max_length=500, blank=True)
    created_at = models.DateTimeField(auto_now_add=True)
    updated_at = models.DateTimeField(auto_now=True)

    class Meta:
        verbose_name_plural = 'Issuer News'
        ordering = ['-published_date']
        indexes = [
            models.Index(fields=['published_date']),
            models.Index(fields=['issuer', 'published_date'])
        ]

    def __str__(self):
        return f"{self.issuer.code} - {self.title[:50]}"

class StockPrice(models.Model):
    issuer = models.ForeignKey(Issuer, on_delete=models.CASCADE)
    date = models.DateField()
    last_trade_price = models.DecimalField(max_digits=10, decimal_places=2)
    max_price = models.DecimalField(max_digits=10, decimal_places=2)
    min_price = models.DecimalField(max_digits=10, decimal_places=2)
    avg_price = models.DecimalField(max_digits=10, decimal_places=2)
    price_change = models.DecimalField(max_digits=10, decimal_places=2)
    volume = models.IntegerField()
    turnover_best = models.DecimalField(max_digits=15, decimal_places=2)
    total_turnover = models.DecimalField(max_digits=15, decimal_places=2)

    class Meta:
        unique_together = ['issuer', 'date']
        indexes = [
            models.Index(fields=['date']),
            models.Index(fields=['issuer', 'date'])
        ]
==============================================================================

These patterns contribute to:
Modularity
Code reusability
Separation of concerns
Maintainable codebase
Scalable architecture
Testable components
